generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                    String                @id @default(uuid()) @db.Uuid
  name                  String                @db.VarChar(255)
  short_name            String?               @db.VarChar(100)
  description           String?               @db.Text
  organization_managers OrganizationManager[]
  events                Event[]

  @@map("organizations")
}

model OrganizationManager {
  reference_user_id String       @db.Uuid
  organization_id   String       @default(dbgenerated("(current_setting('app.current_organization_id'::text))::uuid")) @db.Uuid
  organization      Organization @relation(fields: [organization_id], references: [id])

  @@id([reference_user_id, organization_id])
  @@map("organization_managers")
}

model User {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique
  roles UserHasUserRole[]

  @@map("users")
}

model Event {
  id              String       @id @default(uuid()) @db.Uuid
  name            String       @db.VarChar(255)
  slug            String?      @db.VarChar(100)
  published       Boolean      @default(true)
  description     String?      @db.Text
  organization_id String       @default(dbgenerated("(current_setting('app.current_organization_id'::text))::uuid")) @db.Uuid
  organizer       Organization @relation(fields: [organization_id], references: [id])

  @@map("events")
}

model UserRole {
  id              String            @id @db.VarChar(255)
  name            String            @db.VarChar(255)
  users UserHasUserRole[]

  @@map("user_roles")
}

model UserHasUserRole {
  user_id String @db.Uuid
  role_id String @db.VarChar(255)

  user User     @relation(fields: [user_id], references: [id])
  role UserRole @relation(fields: [role_id], references: [id])

  @@id([user_id, role_id])
  @@map("user_has_user_roles")
}
